{"ast":null,"code":"import _regeneratorRuntime from \"/home/rails/Desktop/redux-react -saga29/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(Post),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deletePost),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(update),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeLatest, takeEvery, put, all } from 'redux-saga/effects';\n\nfunction addPost(action) {\n  var post, url;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          post = JSON.stringify(action.post);\n          _context.prev = 1;\n          url = \"http://localhost:3000/posts/\";\n          _context.next = 5;\n          return fetch(url, {\n            method: 'POST',\n            body: post,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (response) {\n            return console.log(\"POST Done\", response);\n          });\n\n        case 5:\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n          alert('error' + _context.t0);\n\n        case 10:\n          _context.next = 12;\n          return put({\n            type: 'ADD_NEW_POST_ASYNC',\n            value: post\n          });\n\n        case 12:\n          window.location.reload('root');\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[1, 7]]);\n}\n\nfunction Post() {\n  var data;\n  return _regeneratorRuntime.wrap(function Post$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"POST is Calling..\");\n          _context2.prev = 1;\n          _context2.next = 4;\n          return fetch('http://localhost:3000/posts/').then(function (res) {\n            return res.json();\n          });\n\n        case 4:\n          data = _context2.sent;\n          _context2.next = 7;\n          return put({\n            type: 'POST_ASYNC',\n            value: data\n          });\n\n        case 7:\n          _context2.next = 12;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(_context2.t0);\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[1, 9]]);\n}\n\nfunction deletePost(action) {\n  var URL;\n  return _regeneratorRuntime.wrap(function deletePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('delete is calling from saga..', action.id);\n          URL = 'http://localhost:3000/posts';\n          fetch(URL + '/' + action.id, {\n            method: 'delete'\n          }).then(function (response) {\n            return response.json();\n          });\n          _context3.next = 5;\n          return put({\n            type: 'DELETE_POST'\n          });\n\n        case 5:\n          window.location.reload('root');\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n\nfunction update(action) {\n  var data, url;\n  return _regeneratorRuntime.wrap(function update$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          console.log('update is from generator function');\n          data = JSON.stringify(action.data);\n          console.log(data);\n          _context4.prev = 3;\n          url = \"http://localhost:3000/posts/\" + action.data.id;\n          _context4.next = 7;\n          return fetch(url, {\n            method: 'PUT',\n            body: data,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (response) {\n            return console.log(\"PUT Done\", response);\n          });\n\n        case 7:\n          _context4.next = 12;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](3);\n          alert('error' + _context4.t0);\n\n        case 12:\n          _context4.next = 14;\n          return put({\n            type: 'UPDATA_ASYNC'\n          });\n\n        case 14:\n          window.location.reload('root');\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this, [[3, 9]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log(\"root saga\");\n          _context5.t0 = all;\n          _context5.next = 4;\n          return takeLatest('POST', Post);\n\n        case 4:\n          _context5.t1 = _context5.sent;\n          _context5.next = 7;\n          return takeEvery('ADD_POST', addPost);\n\n        case 7:\n          _context5.t2 = _context5.sent;\n          _context5.next = 10;\n          return takeEvery('DELETE', deletePost);\n\n        case 10:\n          _context5.t3 = _context5.sent;\n          _context5.next = 13;\n          return takeEvery('UPDATE', update);\n\n        case 13:\n          _context5.t4 = _context5.sent;\n          _context5.t5 = [_context5.t1, _context5.t2, _context5.t3, _context5.t4];\n          _context5.next = 17;\n          return (0, _context5.t0)(_context5.t5);\n\n        case 17:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}","map":{"version":3,"sources":["/home/rails/Desktop/redux-react -saga29/src/sagas.js"],"names":["addPost","Post","deletePost","update","rootSaga","takeLatest","takeEvery","put","all","action","post","JSON","stringify","url","fetch","method","body","headers","then","res","json","response","console","log","alert","type","value","window","location","reload","data","id","URL"],"mappings":"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","sourcesContent":["import { takeLatest,takeEvery,put,all} from 'redux-saga/effects';\n\n\n\nfunction* addPost(action)\n{\n  const post=JSON.stringify(action.post)\n  try{\n    var url=\"http://localhost:3000/posts/\"\n    yield fetch(url,{\n      method:'POST',\n      body:post,\n      headers: {'Content-Type':'application/json'},\n    })\n    .then(res=>res.json())\n    .then(response => console.log(\"POST Done\",response))\n  }\n  catch(err)\n  {\n    alert('error'+err)\n  }\n\n  yield put({type:'ADD_NEW_POST_ASYNC',value:post})\n  window.location.reload('root')\n}\n\n\n\nfunction* Post()\n{\n  console.log(\"POST is Calling..\")\n  try{\n    const data =  yield fetch('http://localhost:3000/posts/').then(res=>res.json());\n    yield put({type:'POST_ASYNC',value:data})\n  }\n  catch(err){\n    console.log(err);\n  }\n}\n\n\nfunction* deletePost(action)\n{\n  console.log('delete is calling from saga..',action.id);\n  const URL = 'http://localhost:3000/posts';\n  fetch(URL + '/' + action.id, {\n    method: 'delete'\n  })\n  .then(response =>response.json())\n\n\n\n  yield put({type:'DELETE_POST'})\n  window.location.reload('root')\n\n}\n\n\nfunction* update(action){\n\n\n  console.log('update is from generator function');\n  const data=JSON.stringify(action.data)\n\n  console.log(data)\n\n\n  try\n  {\n    var url=\"http://localhost:3000/posts/\"+action.data.id\n    yield fetch(url,{\n      method:'PUT',\n      body:data,\n      headers: {'Content-Type':'application/json'},\n    })\n    .then(res=>res.json())\n    .then(response => console.log(\"PUT Done\",response))\n  }\n  catch(err)\n  {\n    alert('error'+err)\n  }\n\n    //yield put({ type:'POST' })\n  yield put({type:'UPDATA_ASYNC'})\n  window.location.reload('root')\n\n\n}\n\nexport default function* rootSaga(){\n  console.log(\"root saga\")\n  yield all([\n    yield takeLatest('POST',Post),\n    yield takeEvery('ADD_POST',addPost),\n    yield takeEvery('DELETE',deletePost),\n    yield takeEvery('UPDATE',update)\n\n  ])\n\n}"]},"metadata":{},"sourceType":"module"}