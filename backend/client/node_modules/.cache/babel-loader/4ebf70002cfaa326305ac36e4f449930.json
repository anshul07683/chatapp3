{"ast":null,"code":"import _regeneratorRuntime from \"/home/rails/Desktop/redux-react -saga29/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(Post),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeLatest, takeEvery, put, all } from 'redux-saga/effects';\nimport { axios } from 'axios';\n\nfunction addPost(action) {\n  var post;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          post = JSON.stringify(action.post);\n          alert(post);\n\n          try {\n            //   var url=\"http://localhost:3000/posts/\"\n            //   yield fetch(url,{\n            //     method:'POST',\n            //     body:post,\n            //     headers:\n            //     {\n            //       'Content_type':'application/json'\n            //     }\n            //     })\n            //     .then(res=>res.json())\n            //     .then(response => console.log(\"POST Done\",response))\n            // }\n            axios.post('https://site.com/', {\n              body: post\n            });\n          } catch (err) {\n            alert('error' + err);\n          }\n\n          _context.next = 5;\n          return put({\n            type: 'ADD_NEW_POST_ASYNC',\n            value: post\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nfunction Post() {\n  var data;\n  return _regeneratorRuntime.wrap(function Post$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"POST is Calling..\");\n          _context2.prev = 1;\n          _context2.next = 4;\n          return fetch('http://localhost:3000/posts/').then(function (res) {\n            return res.json();\n          });\n\n        case 4:\n          data = _context2.sent;\n          _context2.next = 7;\n          return put({\n            type: 'POST_ASYNC',\n            value: data\n          });\n\n        case 7:\n          _context2.next = 12;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(_context2.t0);\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[1, 9]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(\"root saga\");\n          _context3.t0 = all;\n          _context3.next = 4;\n          return takeLatest('POST', Post);\n\n        case 4:\n          _context3.t1 = _context3.sent;\n          _context3.next = 7;\n          return takeEvery('ADD_POST', addPost);\n\n        case 7:\n          _context3.t2 = _context3.sent;\n          _context3.t3 = [_context3.t1, _context3.t2];\n          _context3.next = 11;\n          return (0, _context3.t0)(_context3.t3);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}","map":{"version":3,"sources":["/home/rails/Desktop/redux-react -saga29/src/sagas.js"],"names":["addPost","Post","rootSaga","takeLatest","takeEvery","put","all","axios","action","post","JSON","stringify","alert","body","err","type","value","console","log","fetch","then","res","json","data"],"mappings":";;;;yBAIUA,O;;;yBA+BAC,I;;;yBAeeC,Q;;AAlDzB,SAASC,UAAT,EAAoBC,SAApB,EAA8BC,GAA9B,EAAkCC,GAAlC,QAA4C,oBAA5C;AACA,SAAQC,KAAR,QAAoB,OAApB;;AAGA,SAAUP,OAAV,CAAkBQ,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUC,UAAAA,IAFV,GAEeC,IAAI,CAACC,SAAL,CAAeH,MAAM,CAACC,IAAtB,CAFf;AAGIG,UAAAA,KAAK,CAACH,IAAD,CAAL;;AACC,cAAG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIF,YAAAA,KAAK,CAACE,IAAN,CAAW,mBAAX,EAAgC;AAChCI,cAAAA,IAAI,EAAEJ;AAD0B,aAAhC;AAGH,WAhBA,CAiBD,OAAMK,GAAN,EACA;AACEF,YAAAA,KAAK,CAAC,UAAQE,GAAT,CAAL;AACD;;AAxBL;AA0BI,iBAAMT,GAAG,CAAC;AAACU,YAAAA,IAAI,EAAC,oBAAN;AAA2BC,YAAAA,KAAK,EAACP;AAAjC,WAAD,CAAT;;AA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+BA,SAAUR,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIgB,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAFJ;AAAA;AAIoB,iBAAMC,KAAK,CAAC,8BAAD,CAAL,CAAsCC,IAAtC,CAA2C,UAAAC,GAAG;AAAA,mBAAEA,GAAG,CAACC,IAAJ,EAAF;AAAA,WAA9C,CAAN;;AAJpB;AAIYC,UAAAA,IAJZ;AAAA;AAKM,iBAAMlB,GAAG,CAAC;AAACU,YAAAA,IAAI,EAAC,YAAN;AAAmBC,YAAAA,KAAK,EAACO;AAAzB,WAAD,CAAT;;AALN;AAAA;AAAA;;AAAA;AAAA;AAAA;AASMN,UAAAA,OAAO,CAACC,GAAR;;AATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,eAAe,SAAUhB,QAAV;AAAA;AAAA;AAAA;AAAA;AACbe,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AADa,yBAEPZ,GAFO;AAAA;AAGX,iBAAMH,UAAU,CAAC,MAAD,EAAQF,IAAR,CAAhB;;AAHW;AAAA;AAAA;AAIX,iBAAMG,SAAS,CAAC,UAAD,EAAYJ,OAAZ,CAAf;;AAJW;AAAA;AAAA;AAAA;AAEb;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest,takeEvery,put,all} from 'redux-saga/effects';\nimport {axios} from 'axios';\n\n\nfunction* addPost(action)\n{\n    const post=JSON.stringify(action.post)\n    alert(post)\n     try{\n    //   var url=\"http://localhost:3000/posts/\"\n    //   yield fetch(url,{\n    //     method:'POST',\n    //     body:post,\n    //     headers:\n    //     {\n    //       'Content_type':'application/json'\n    //     }\n    //     })\n    //     .then(res=>res.json())\n    //     .then(response => console.log(\"POST Done\",response))\n    // }\n        axios.post('https://site.com/', {\n        body: post\n    })\n    }\n    catch(err)\n    {\n      alert('error'+err)\n    }\n\n    yield put({type:'ADD_NEW_POST_ASYNC',value:post})\n}\n\n\n\nfunction* Post()\n{\n    console.log(\"POST is Calling..\")\n    try{\n      const data =  yield fetch('http://localhost:3000/posts/').then(res=>res.json());\n      yield put({type:'POST_ASYNC',value:data})\n\n    }\n    catch(err){\n      console.log(err);\n    }\n}\n\n\n\nexport default function* rootSaga(){\n  console.log(\"root saga\")\n  yield all([\n    yield takeLatest('POST',Post),\n    yield takeEvery('ADD_POST',addPost)\n  ])\n\n}"]},"metadata":{},"sourceType":"module"}