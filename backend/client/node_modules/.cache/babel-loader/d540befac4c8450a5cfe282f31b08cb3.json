{"ast":null,"code":"import _regeneratorRuntime from \"/home/rails/demo/redux-react -saga29/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(Post),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deletePost),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(update),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeLatest, takeEvery, put, all } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction addPost(action) {\n  var post, url;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          post = action.post;\n          _context.prev = 1;\n          url = \"/\";\n          _context.next = 5;\n          return fetch(url, {\n            method: 'POST',\n            body: post,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (response) {\n            return console.log(\"POST Done\", response);\n          });\n\n        case 5:\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n          alert('error' + _context.t0);\n\n        case 10:\n          _context.next = 12;\n          return put({\n            type: 'ADD_NEW_POST_ASYNC',\n            value: post\n          });\n\n        case 12:\n          window.location.reload('root');\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[1, 7]]);\n}\n\nfunction Post() {\n  var data;\n  return _regeneratorRuntime.wrap(function Post$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"POST is Calling..\");\n          _context2.prev = 1;\n          // \tconst data =  yield fetch(\"/posts\",{\n          // \t\tmethod:'GET',\n          // \t\theaders: {'Content-Type':'application/json'},\n          // \t}\n          // ).then(res=>res.json());\n          data = axios.get(\"/\");\n          alert(data);\n          _context2.next = 6;\n          return put({\n            type: 'POST_ASYNC',\n            value: data\n          });\n\n        case 6:\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(_context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[1, 8]]);\n}\n\nfunction deletePost(action) {\n  var URL;\n  return _regeneratorRuntime.wrap(function deletePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('delete is calling from saga..', action.id);\n          URL = 'http://localhost:3000/posts';\n          fetch(URL + '/' + action.id, {\n            method: 'delete'\n          }).then(function (res) {\n            return res.json();\n          }).then(function (response) {\n            return console.log(\"Delete Done\", response);\n          });\n          _context3.next = 5;\n          return put({\n            type: 'DELETE_POST'\n          });\n\n        case 5:\n          window.location.reload('root');\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n\nfunction update(action) {\n  var data, url;\n  return _regeneratorRuntime.wrap(function update$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          console.log('update is from generator function');\n          data = JSON.stringify(action.data);\n          console.log(data);\n          _context4.prev = 3;\n          url = \"http://localhost:3000/posts/\" + action.data.id;\n          _context4.next = 7;\n          return fetch(url, {\n            method: 'PUT',\n            body: data,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (response) {\n            return console.log(\"PUT Done\", response);\n          });\n\n        case 7:\n          _context4.next = 12;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](3);\n          alert('error' + _context4.t0);\n\n        case 12:\n          _context4.next = 14;\n          return put({\n            type: 'UPDATA_ASYNC'\n          });\n\n        case 14:\n          window.location.reload('root');\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this, [[3, 9]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log(\"root saga\");\n          _context5.t0 = all;\n          _context5.next = 4;\n          return takeLatest('POST', Post);\n\n        case 4:\n          _context5.t1 = _context5.sent;\n          _context5.next = 7;\n          return takeEvery('ADD_POST', addPost);\n\n        case 7:\n          _context5.t2 = _context5.sent;\n          _context5.next = 10;\n          return takeEvery('DELETE', deletePost);\n\n        case 10:\n          _context5.t3 = _context5.sent;\n          _context5.next = 13;\n          return takeEvery('UPDATE', update);\n\n        case 13:\n          _context5.t4 = _context5.sent;\n          _context5.t5 = [_context5.t1, _context5.t2, _context5.t3, _context5.t4];\n          _context5.next = 17;\n          return (0, _context5.t0)(_context5.t5);\n\n        case 17:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}","map":{"version":3,"sources":["/home/rails/demo/redux-react -saga29/src/sagas.js"],"names":["addPost","Post","deletePost","update","rootSaga","takeLatest","takeEvery","put","all","axios","action","post","url","fetch","method","body","headers","then","res","json","response","console","log","alert","type","value","window","location","reload","data","get","id","URL","JSON","stringify"],"mappings":"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","sourcesContent":["import { takeLatest,takeEvery,put,all} from 'redux-saga/effects';\nimport axios from 'axios';\nfunction* addPost(action)\n{\n\tconst post=action.post\n\ttry{\n\t\tvar url=\"/\"\n\t\tyield fetch(url,{\n\t\t\tmethod:'POST',\n\t\t\tbody:post,\n\t\t\theaders: {'Content-Type':'application/json'},\n\t\t})\n\t\t.then(res=>res.json())\n\t\t.then(response => console.log(\"POST Done\",response))\n\t}\n\tcatch(err)\n\t{\n\t\talert('error'+err)\n\t}\n\n\tyield put({type:'ADD_NEW_POST_ASYNC',value:post})\n\twindow.location.reload('root')\n}\n\nfunction* Post()\n{\n\tconsole.log(\"POST is Calling..\")\n\ttry{\n\t// \tconst data =  yield fetch(\"/posts\",{\n\t// \t\tmethod:'GET',\n\t// \t\theaders: {'Content-Type':'application/json'},\n\n\t// \t}\n\t// ).then(res=>res.json());\n\tconst data=axios.get(\"/\")\n\talert(data)\n\t\tyield put({type:'POST_ASYNC',value:data})\n\t}\n\n\tcatch(err){\n\t\tconsole.log(err);\n\t}\n}\n\nfunction* deletePost(action)\n{\n\tconsole.log('delete is calling from saga..',action.id);\n\tconst URL = 'http://localhost:3000/posts';\n\n\tfetch(URL + '/' + action.id, {\n\t\tmethod: 'delete'\n\t})\n\t.then(res=>res.json())\n\t.then(response => console.log(\"Delete Done\",response))\n\n\tyield put({type:'DELETE_POST'})\n\twindow.location.reload('root')\n\n}\n\nfunction* update(action){\n\tconsole.log('update is from generator function');\n\tconst data=JSON.stringify(action.data)\n\tconsole.log(data)\n\n\ttry{\n\t\tvar url=\"http://localhost:3000/posts/\"+action.data.id\n\t\tyield fetch(url,{\n\t\t\tmethod:'PUT',\n\t\t\tbody:data,\n\t\t\theaders: {'Content-Type':'application/json'},\n\t\t})\n\t\t.then(res=>res.json())\n\t\t.then(response => console.log(\"PUT Done\",response))\n\t}\n\n\tcatch(err){\n\n\t\talert('error'+err)\n\t}\n\n\tyield put({type:'UPDATA_ASYNC'})\n\twindow.location.reload('root')\n\n}\n\nexport default function* rootSaga(){\n\tconsole.log(\"root saga\")\n\tyield all([\n\t\tyield takeLatest('POST',Post),\n\t\tyield takeEvery('ADD_POST',addPost),\n\t\tyield takeEvery('DELETE',deletePost),\n\t\tyield takeEvery('UPDATE',update)\n\t])\n}"]},"metadata":{},"sourceType":"module"}